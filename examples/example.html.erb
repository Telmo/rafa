<div id="placeholder" style="text-align:center; background-color:#333">
  <div style="font-size:large; font-weight:bold; font-color:#eee">
    Rafa example <br />
    2009 - Ruben Medellin
  </div>
</div>
<% 
  # Construction of canvas via div id or by specifying coordinates
  canvas('placeholder', 600, 600) do |canvas|

    # Easy integration with Ruby builtin methods
    30.step(400, 30) do |i|
      canvas.circle(i, 20, 10, 'stroke-width' => 2, 'stroke' => '#fcc', 'fill' => 'cf0')
    end

    # Ability to name a variable to be used in plain js
    circle1 = canvas.circle(50, 50, 20, :fill => '#0f3', :id => 'circle1')
    circle2 = canvas.circle(50, 50, 20, :fill => '#f03')

    # Wrapping of raphael methods
    circle1.translate(1, 4)
    circle2.stroke = '#f00'
    
    rect = canvas.rect(80, 80, 130, 160, :rounded => 20, :fill => '#af3')
    rect.rotate(20)

    # Access of properties via several methods
    text = canvas.text(100, 40, "Hello world", :id => "my_text")
    text['font-size'] = 60
    text.fill = '#58f'
    text['stroke-width'] = 2
    text['stroke'] = "foo_bar"
    text.x(200).y(200)
   
    animated_square = canvas.rect(300, 100, 40, 40, :fill => '#0f3')
    animated_circle = canvas.circle(300, 150, 20)

    # Easy animation inline
    animated_square.animate(3.seconds, :fill => '#f70')

    # or in blocks
    animated_circle.animate(10.seconds) do |anim|
      anim.fill('#f0f').attr('stroke-width', 10)

      # Chain animations. It will animate when the first finish, and the second one
      # will last 5 seconds
      anim.after(5.seconds) do |other_anim|
        other_anim.fill('#2fd')
        other_anim.scale(0.4, 0.8)
      end

      # Hook events at the end of animation, as callbacks
      anim.call_when_finished('alert("I\'m finished!")')
    end

    # Insertion of native javascript
    canvas << "d = new Date()"

    ell = canvas.ellipse(60, 300, 100, 40, 'fill' => "#481728", 'stroke-width' => 8)

    # Use of literal javascript in animations (Strings and numbers are converted to json before)
    ell.animate 5.seconds,
      'fill' => js_literal('Raphael.getColor()'),
      'font-size' => js_literal('d.getSeconds()')

    # Large javascript insertion with here documents
    canvas << <<-RC 
      var randomColor = function() {
        var colors = [  
          '#785629', '#DA0C00', '#E1A12E', '#FFE8AD', '#75B331', '#87B30A',
          '#A1E82A', '#477546', '#A9C274', '#66A546', '#3D3D3D', '#4AC2C2'
        ]
        return colors[Math.floor(Math.random() * colors.length)]
      };
    RC

    # Continuous animation
    canvas.rect(250, 250, 350, 350).every(3.seconds) do |r|
      r.rotate(js_literal("Math.ceil(Math.random() * 360)"))
      r.fill(js_literal("randomColor()"))
    end
  end
%>
